# code: language=ansible
---
- name: Make ~/.config/kind
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0750'
    group: root
    owner: root
  loop:
    - "{{ kind_home }}"
  register: result

- name: Install kubectl
  ansible.builtin.shell: |
    [ `lsb_release -i | cut -f2` = "Ubuntu" ] || set -o pipefail
    curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    chmod +x ./kubectl
    mv ./kubectl /usr/local/bin/kubectl
  register: result
  changed_when: result.rc == 0

- name: Install kind
  ansible.builtin.shell: |
    [ `lsb_release -i | cut -f2` = "Ubuntu" ] || set -o pipefail
    curl -Lo /usr/local/bin/kind https://kind.sigs.k8s.io/dl/v{{ kind_ver }}/kind-linux-amd64
    chmod +x /usr/local/bin/kind
  register: result
  changed_when: result.rc == 0

- name: Print variables
  ansible.builtin.debug:
    var: result

- name: Make kind-config.yml
  become: true
  ansible.builtin.copy:
    dest: "{{ kind_config }}"
    content: |
      kind: Cluster
      apiVersion: kind.x-k8s.io/v1alpha4
      networking:
        apiServerAddress: "{{ ipaddr }}"
        apiServerPort: 6443
      nodes:
      - role: control-plane
        kubeadmConfigPatches:
        - |
          kind: InitConfiguration
          nodeRegistration:
            kubeletExtraArgs:
              node-labels: "ingress-ready=true"
        extraPortMappings:
        - containerPort: 80
          hostPort: 80
          protocol: TCP
        - containerPort: 443
          hostPort: 443
          protocol: TCP
        - containerPort: 32000
          hostPort: 32000
          protocol: TCP
  register: result
  ignore_errors: true

- name: Print variables
  ansible.builtin.debug:
    var: result

- name: Exist Kind Cluster
  ansible.builtin.shell: |
    [ `lsb_release -i | cut -f2` = "Ubuntu" ] || set -o pipefail
    kind get clusters
  register: result

- name: Print variables
  ansible.builtin.debug:
    var: result

- name: Create Kind Cluster
  ansible.builtin.shell: |
    [ `lsb_release -i | cut -f2` = "Ubuntu" ] || set -o pipefail
    kind create cluster --config {{ kind_config }}
  register: result
  when: result.stderr
  changed_when: result.rc == 0

- name: Print variables
  ansible.builtin.debug:
    var: result

- name: Create Ingress Controller
  ansible.builtin.shell: |
    [ `lsb_release -i | cut -f2` = "Ubuntu" ] || set -o pipefail
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
  register: result
  changed_when: result.rc == 0

- name: Print variables
  ansible.builtin.debug:
    var: result
